type: edu
custom_name: stage6
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                    ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: machine/coffee_machine.py
  visible: true
  text: |
    # Write your code here
    WATER_REQUIREMENTS = [250, 350, 200]
    MILK_REQUIREMENTS = [0, 75, 100]
    COFFEE_REQUIREMENTS = [16, 20, 12]

    money_stock = 550
    water_stock = 400
    milk_stock = 540
    coffee_stock = 120
    cups_stock = 9


    def remaining():
        print('The coffee machine has:')
        print(str(water_stock) + ' of water')
        print(str(milk_stock) + ' of milk')
        print(str(coffee_stock) + ' of coffee beans')
        print(str(cups_stock) + ' of disposable cups')
        print(str(money_stock) + ' of money')


    def choose_action():
        return input('Write action (buy, fill, take, remaining, exit):')


    def choose_beverage():
        choice = input('What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:')
        if choice == 'back':
            return None

        return int(choice)


    def check_stock(beverage):
        if WATER_REQUIREMENTS[beverage - 1] > water_stock:
            print('Sorry, not enough water!')
            return False

        if MILK_REQUIREMENTS[beverage - 1] > milk_stock:
            print('Sorry, not enough milk!')
            return False

        if COFFEE_REQUIREMENTS[beverage - 1] > coffee_stock:
            print('Sorry, not enough coffee!')
            return False

        if cups_stock < 1:
            print('Sorry, not enough cups!')
            return False

        print('I have enough resources, making you a coffee!')
        return True


    def brew(beverage):
        global money_stock, water_stock, coffee_stock, milk_stock, cups_stock
        enough_stock = check_stock(beverage)
        if enough_stock:
            cups_stock -= 1

            if beverage == 1:
                water_stock -= 250
                coffee_stock -= 16
                money_stock += 4
            elif beverage == 2:
                water_stock -= 350
                milk_stock -= 75
                coffee_stock -= 20
                money_stock += 7
            elif beverage == 3:
                water_stock -= 200
                milk_stock -= 100
                coffee_stock -= 12
                money_stock += 6


    def take():
        global money_stock
        previous_stock = money_stock
        money_stock = 0
        print('I gave you $' + str(previous_stock))


    def fill():
        global water_stock, milk_stock, coffee_stock, cups_stock

        water_stock += int(input('Write how many ml of water do you want to add:'))
        milk_stock += int(input('Write how many ml of milk do you want to add:'))
        coffee_stock += int(input('Write how many grams of coffee beans do you want to add:'))
        cups_stock += int(input('Write how many disposable cups of coffee do you want to add:'))


    def trigger_action(action_to_trigger):
        if action_to_trigger == 'buy':
            beverage = choose_beverage()
            if isinstance(beverage, int):
                brew(beverage)
        elif action_to_trigger == 'fill':
            fill()
        elif action_to_trigger == 'take':
            take()
        elif action_to_trigger == 'remaining':
            remaining()


    action = ''
    while action != 'exit':
        action = choose_action()
        trigger_action(action)
  learner_created: true
feedback_link: https://hyperskill.org/projects/68/stages/371/implement
status: Solved
record: -1
